/* This file is generated by zits. Do not edit manually */

// @ts-ignore
import {
// @ts-ignore
WebsocketConnectionOptions, KitsuneAgent, KitsuneSpace, HoloHashB64, AgentPubKeyB64, DnaHashB64, WasmHashB64, EntryHashB64, ActionHashB64, AnyDhtHashB64, InstalledAppId, Signature, CellId, DnaProperties, RoleName, InstalledCell, Timestamp, Duration, HoloHashed, NetworkInfo, FetchPoolInfo,
/** hdk/action.ts */
// @ts-ignore
SignedActionHashed, RegisterAgentActivity, ActionHashed, ActionType, Action, NewEntryAction, Dna, AgentValidationPkg, InitZomesComplete, CreateLink, DeleteLink, OpenChain, CloseChain, Update, Delete, Create,
/** hdk/capabilities.ts */
// @ts-ignore
CapSecret, CapClaim, GrantedFunctionsType, GrantedFunctions, ZomeCallCapGrant, CapAccessType, CapAccess, CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
// @ts-ignore
DhtOpType, DhtOp, getDhtOpType, getDhtOpAction, getDhtOpEntry, getDhtOpSignature,
/** hdk/entry.ts */
// @ts-ignore
EntryVisibility, AppEntryDef, EntryType, EntryContent, Entry,
/** hdk/record.ts */
// @ts-ignore
Record as HcRecord, RecordEntry as HcRecordEntry,
/** hdk/link.ts */
//AnyLinkableHash,
// @ts-ignore
ZomeIndex, LinkType, LinkTag, RateWeight, RateBucketId, RateUnits, Link,
/** api/admin/types.ts */
// @ts-ignore
InstalledAppInfoStatus, DeactivationReason, DisabledAppReason, StemCell, ProvisionedCell, ClonedCell, CellType, CellInfo, AppInfo, MembraneProof, FunctionName, ZomeName, ZomeDefinition, IntegrityZome, CoordinatorZome, DnaDefinition, ResourceBytes, ResourceMap, CellProvisioningStrategy, CellProvisioning, DnaVersionSpec, DnaVersionFlexible, AppRoleDnaManifest, AppRoleManifest, AppManifest, AppBundle, AppBundleSource, NetworkSeed, ZomeLocation,
} from '@holochain/client';


/// Simple Hashes
// @ts-ignore
type AgentArray = Uint8Array;
// @ts-ignore
type DnaArray = Uint8Array;
// @ts-ignore
type WasmArray = Uint8Array;
// @ts-ignore
type EntryArray = Uint8Array;
// @ts-ignore
type ActionArray = Uint8Array;
// @ts-ignore
type AnyDhtArray = Uint8Array;
// @ts-ignore
type AnyLinkableArray = Uint8Array;
// @ts-ignore
type ExternalArray = Uint8Array;

// @ts-ignore
import {
/** Common */
// @ts-ignore
DhtOpHashB64, DhtOpHash,
/** DnaFile */
// @ts-ignore
DnaFile, DnaDef, Zomes, WasmCode,
/** entry-details */
// @ts-ignore
EntryDetails, RecordDetails, Details, DetailsType, EntryDhtStatus,
/** Validation */
// @ts-ignore
ValidationStatus, ValidationReceipt,
} from '@holochain-open-dev/core-types';

export interface CastTipInput {
  tip: TipProtocol
  peers: AgentArray[]
}

/** Bool: True if state change just happened (real-time) */
export enum StateChangeType {
	Create = 'Create',
	Update = 'Update',
	Delete = 'Delete',
}
export type StateChangeVariantCreate = {Create: boolean}
export type StateChangeVariantUpdate = {Update: boolean}
export type StateChangeVariantDelete = {Delete: boolean}
export type StateChange = 
 | StateChangeVariantCreate | StateChangeVariantUpdate | StateChangeVariantDelete;

export interface LinkPulse {
  link: Link
  state: StateChange
}

export interface EntryPulse {
  state: StateChange
  orig_ah?: ActionArray
  ah: ActionArray
  eh: EntryArray
  ts: Timestamp
  author: AgentArray
  def: AppEntryDef
  bytes: Uint8Array
}

/**  */
export interface ZomeSignal {
  from: AgentArray
  pulses: ZomeSignalProtocol[]
}

/**  */
export enum ZomeSignalProtocolType {
	System = 'System',
	Entry = 'Entry',
	Link = 'Link',
	Tip = 'Tip',
}
export type ZomeSignalProtocolVariantSystem = {System: SystemSignalProtocol}
export type ZomeSignalProtocolVariantEntry = {Entry: EntryPulse}
export type ZomeSignalProtocolVariantLink = {Link: LinkPulse}
export type ZomeSignalProtocolVariantTip = {Tip: TipProtocol}
export type ZomeSignalProtocol = 
 | ZomeSignalProtocolVariantSystem | ZomeSignalProtocolVariantEntry | ZomeSignalProtocolVariantLink | ZomeSignalProtocolVariantTip;

/** Protocol for notifying the ViewModel (UI) of system level events */
export type SystemSignalProtocolVariantPostCommitNewStart = {
  type: "PostCommitNewStart"
  app_entry_type: string
}
export type SystemSignalProtocolVariantPostCommitNewEnd = {
  type: "PostCommitNewEnd"
  app_entry_type: string
  succeeded: boolean
}
export type SystemSignalProtocolVariantPostCommitDeleteStart = {
  type: "PostCommitDeleteStart"
  app_entry_type: string
}
export type SystemSignalProtocolVariantPostCommitDeleteEnd = {
  type: "PostCommitDeleteEnd"
  app_entry_type: string
  succeeded: boolean
}
export type SystemSignalProtocolVariantSelfCallStart = {
  type: "SelfCallStart"
  zome_name: string
  fn_name: string
}
export type SystemSignalProtocolVariantSelfCallEnd = {
  type: "SelfCallEnd"
  zome_name: string
  fn_name: string
  succeeded: boolean
}
export type SystemSignalProtocol =
  | SystemSignalProtocolVariantPostCommitNewStart
  | SystemSignalProtocolVariantPostCommitNewEnd
  | SystemSignalProtocolVariantPostCommitDeleteStart
  | SystemSignalProtocolVariantPostCommitDeleteEnd
  | SystemSignalProtocolVariantSelfCallStart
  | SystemSignalProtocolVariantSelfCallEnd;

/** Used by UI ONLY. That's why we use B64 here. */
export enum TipProtocolType {
	Ping = 'Ping',
	Pong = 'Pong',
	Entry = 'Entry',
	Link = 'Link',
	App = 'App',
}
export type TipProtocolVariantPing = {Ping: AgentArray}
export type TipProtocolVariantPong = {Pong: AgentArray}
export type TipProtocolVariantEntry = {Entry: EntryPulse}
export type TipProtocolVariantLink = {Link: LinkPulse}
export type TipProtocolVariantApp = {App: Uint8Array}
export type TipProtocol = 
 | TipProtocolVariantPing | TipProtocolVariantPong | TipProtocolVariantEntry | TipProtocolVariantLink | TipProtocolVariantApp;
