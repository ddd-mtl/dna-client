/* This file is generated by zits. Do not edit manually */

import {EntryTypes, Signal, AgentPubKeyWithTag, Contact, NotificationTip, RemoveNotifierForNotificantInput, SentNotification, TwilioCredentials, UpdateContactInput, UpdateTwilioCredentialsInput, } from './notifications.types';
import {
WebsocketConnectionOptions,
/** types.ts */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
ExternalHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchPoolInfo,
/** hdk/action.ts */
SignedActionHashed,
RegisterAgentActivity,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
GrantedFunctionsType,
GrantedFunctions,
ZomeCallCapGrant,
CapAccessType,
CapAccess,
CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** hdk/link.ts */
AnyLinkableHash,
ZomeIndex,
LinkType,
LinkTag,
RateWeight,
RateBucketId,
RateUnits,
Link,
/** api/admin/types.ts */
InstalledAppInfoStatus,
DeactivationReason,
DisabledAppReason,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
//DnaHashB64, (duplicate)
//AnyDhtHashB64, (duplicate)
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

/** User defined external dependencies */
import {NotificationsLinkType as LinkTypes} from "./notifications.integrity"

import {ZomeProxy} from '@ddd-qc/lit-happ';
import {notificationsFunctionNames} from './notifications.fn';
import {NotificationsUnitEnum, NotificationsLinkType} from './notifications.integrity';

/**
 *
 */
export class NotificationsProxy extends ZomeProxy {
  static readonly DEFAULT_ZOME_NAME = "notifications";
  static readonly FN_NAMES = notificationsFunctionNames;
  static readonly ENTRY_TYPES = Object.values(NotificationsUnitEnum);
  static readonly LINK_TYPES = Object.values(NotificationsLinkType);
 
  async sendContact(contact: Contact): Promise<void> {
    return this.call('send_contact', contact);
  }

  async sendUpdateContact(contact: Contact): Promise<void> {
    return this.call('send_update_contact', contact);
  }

  async sendDeleteContact(contact: Contact): Promise<void> {
    return this.call('send_delete_contact', contact);
  }

  async createContact(contact: Contact): Promise<HcRecord> {
    return this.call('create_contact', contact);
  }

  async getContacts(agentPubKeys: AgentPubKey[]): Promise<Contact[]> {
    return this.call('get_contacts', agentPubKeys);
  }

  async updateContact(input: UpdateContactInput): Promise<HcRecord> {
    return this.call('update_contact', input);
  }

  async deleteContact(originalContactHash: ActionHash): Promise<ActionHash> {
    return this.call('delete_contact', originalContactHash);
  }

  async handleNotificationTip(data: NotificationTip): Promise<void> {
    return this.call('handle_notification_tip', data);
  }

  async sendNotificationTip(data: NotificationTip): Promise<void> {
    return this.call('send_notification_tip', data);
  }

  async claimNotifier(description: string): Promise<void> {
    return this.call('claim_notifier', description);
  }

  async findANotifier(): Promise<AgentPubKey> {
    return this.call('find_a_notifier', null);
  }

  async listNotifiers(): Promise<AgentPubKeyWithTag[]> {
    return this.call('list_notifiers', null);
  }

  async selectNotifier(input: AgentPubKey): Promise<void> {
    return this.call('select_notifier', input);
  }

  async selectFirstNotifier(): Promise<void> {
    return this.call('select_first_notifier', null);
  }

  async getNotifiersForNotificant(notificant: AgentPubKey): Promise<AgentPubKey[]> {
    return this.call('get_notifiers_for_notificant', notificant);
  }

  async getMyNotifier(): Promise<AgentPubKey> {
    return this.call('get_my_notifier', null);
  }

  async removeNotifierForNotificant(input: RemoveNotifierForNotificantInput): Promise<void> {
    return this.call('remove_notifier_for_notificant', input);
  }

  async retrieveSentNotifications(): Promise<HcRecord[]> {
    return this.call('retrieve_sent_notifications', null);
  }

  async wasItSent(messageId: string): Promise<boolean> {
    return this.call('was_it_sent', messageId);
  }

  async createSentNotification(sentNotification: SentNotification): Promise<HcRecord> {
    return this.call('create_sent_notification', sentNotification);
  }

  async grantUnrestrictedCapability(): Promise<void> {
    return this.call('grant_unrestricted_capability', null);
  }

  async getGrants(): Promise<void> {
    return this.call('get_grants', null);
  }

  async createTwilioCredentials(twilioCredentials: TwilioCredentials): Promise<HcRecord> {
    return this.call('create_twilio_credentials', twilioCredentials);
  }

  async getTwilioCredentials(): Promise<HcRecord | null> {
    return this.call('get_twilio_credentials', null);
  }

  async updateTwilioCredentials(input: UpdateTwilioCredentialsInput): Promise<HcRecord> {
    return this.call('update_twilio_credentials', input);
  }

  async deleteTwilioCredentials(originalTwilioCredentialsHash: ActionHash): Promise<ActionHash> {
    return this.call('delete_twilio_credentials', originalTwilioCredentialsHash);
  }
}
