/* This file is generated by zits. Do not edit manually */

// @ts-ignore
import {
// @ts-ignore
WebsocketConnectionOptions, KitsuneAgent, KitsuneSpace, HoloHashB64, AgentPubKeyB64, DnaHashB64, WasmHashB64, EntryHashB64, ActionHashB64, AnyDhtHashB64, InstalledAppId, Signature, CellId, DnaProperties, RoleName, InstalledCell, Timestamp, Duration, HoloHashed, NetworkInfo, FetchPoolInfo,
/** hdk/action.ts */
// @ts-ignore
SignedActionHashed, RegisterAgentActivity, ActionHashed, ActionType, Action, NewEntryAction, Dna, AgentValidationPkg, InitZomesComplete, CreateLink, DeleteLink, OpenChain, CloseChain, Update, Delete, Create,
/** hdk/capabilities.ts */
// @ts-ignore
CapSecret, CapClaim, GrantedFunctionsType, GrantedFunctions, ZomeCallCapGrant, CapAccessType, CapAccess, CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
// @ts-ignore
DhtOpType, DhtOp, getDhtOpType, getDhtOpAction, getDhtOpEntry, getDhtOpSignature,
/** hdk/entry.ts */
// @ts-ignore
EntryVisibility, AppEntryDef, EntryType, EntryContent, Entry,
/** hdk/record.ts */
// @ts-ignore
Record as HcRecord, RecordEntry as HcRecordEntry,
/** hdk/link.ts */
//AnyLinkableHash,
// @ts-ignore
ZomeIndex, LinkType, LinkTag, RateWeight, RateBucketId, RateUnits, Link,
/** api/admin/types.ts */
// @ts-ignore
InstalledAppInfoStatus, DeactivationReason, DisabledAppReason, StemCell, ProvisionedCell, ClonedCell, CellType, CellInfo, AppInfo, MembraneProof, FunctionName, ZomeName, ZomeDefinition, IntegrityZome, CoordinatorZome, DnaDefinition, ResourceBytes, ResourceMap, CellProvisioningStrategy, CellProvisioning, DnaVersionSpec, DnaVersionFlexible, AppRoleDnaManifest, AppRoleManifest, AppManifest, AppBundle, AppBundleSource, NetworkSeed, ZomeLocation,
} from '@holochain/client';


/// Simple Hashes
// @ts-ignore
type AgentArray = Uint8Array;
// @ts-ignore
type DnaArray = Uint8Array;
// @ts-ignore
type WasmArray = Uint8Array;
// @ts-ignore
type EntryArray = Uint8Array;
// @ts-ignore
type ActionArray = Uint8Array;
// @ts-ignore
type AnyDhtArray = Uint8Array;
// @ts-ignore
type AnyLinkableArray = Uint8Array;
// @ts-ignore
type ExternalArray = Uint8Array;

// @ts-ignore
import {
/** Common */
// @ts-ignore
DhtOpHashB64, DhtOpHash,
/** DnaFile */
// @ts-ignore
DnaFile, DnaDef, Zomes, WasmCode,
/** entry-details */
// @ts-ignore
EntryDetails, RecordDetails, Details, DetailsType, EntryDhtStatus,
/** Validation */
// @ts-ignore
ValidationStatus, ValidationReceipt,
} from '@holochain-open-dev/core-types';

/**  */
export interface PublishOwnershipInput {
  sharedAh: ActionArray
  nonAuthor?: [AgentArray, Signature]
}

/**  */
export interface SendKeyInput {
  recipient: AgentArray
  keyAh: ActionArray
}

/**  */
export interface RecvKeyInput {
  keyAh: ActionArray
  key: SharedKey
}

/**  */
export interface RequestKeyInput {
  maybeAgent?: AgentArray
  sharedAh: ActionArray
}

/**  */
export interface OfferOwnershipInput {
  agent: AgentArray
  sharedAh: ActionArray
}

/**  */
export interface AppTip {
  type_type: string
  shared_ah: ActionArray
  maybe_sign?: Signature
}

/**  */
export interface RequestOwnershipInput {
  agent: AgentArray
  sharedAh: ActionArray
  signature: Signature
}

/**
 * -------------------------------------------------------------------------------------------------
 * Global consts
 * -------------------------------------------------------------------------------------------------
 * DNA/Zome names
 */
export const DEFAULT_COORDINATOR_ZOME_NAME = "zSharedOwnership";

export const DEFAULT_INTEGRITY_ZOME_NAME = "shared_ownership_integrity";

/** ANCHOR NAMES */
export const ROOT_ANCHOR_SHAREDS = "all_shareds";

/**
 * -------------------------------------------------------------------------------------------------
 * Entry types
 * -------------------------------------------------------------------------------------------------
 */
export interface SharedKey {
  key_ref: unknown
}

export enum SharedOwnershipEntryType {
	SharedKey = 'SharedKey',
}
export type SharedOwnershipEntryVariantSharedKey = {SharedKey: SharedKey}
export type SharedOwnershipEntry = 
 | SharedOwnershipEntryVariantSharedKey;

/** Tag data used for validation */
export interface TagShared {
  signature: Signature
  maybe_owner_link_ah?: ActionArray
}

/** Tag data used for validation */
export interface TagOwner {
  shared_link_ah: ActionArray
}
